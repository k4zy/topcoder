import math
import string

class HeightRound:
    def getBestRound(self, heights):
        if len(heights) < 4 : return sorted(heights)
        array  = sorted(heights) 
        base_list = array[:3] + [array[0]]
        insert_list = array[3:]
        print(base_list)
        print(insert_list)
        
        for num in insert_list:
            best_score = 99999999
            index = 1
            for j in range(1,len(base_list)):
                score = abs(base_list[j]-num) + abs(base_list[j-1]-num)
                if best_score > score:
                    best_score = score
                    index = j
            base_list.insert(index,num)
        return base_list[:-1]

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = HeightRound()
	startTime = time.clock()
	answer = obj.getBestRound(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		sys.stdout.write(str("\t") + str("{"))
		for i in range(len(p1)):
			if (i > 0):
				sys.stdout.write(str(","))
			
			sys.stdout.write(str(p1[i]))
		
		print(str("}"))
	
	print(str("Your answer:"))
	sys.stdout.write(str("\t") + str("{"))
	for i in range(len(answer)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(answer[i]))
	
	print(str("}"))
	if (hasAnswer):
		if (len(answer) != len(p1)):
			res = False
		else:
			for i in range(len(answer)):
				if (answer[i] != p1[i]):
					res = False
				
			
		
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = [1,1,1,2,3,2]
p1 = [1,2,4,3]
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = [1000,500,1]
p1 = [1,500,1000]
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = [1,3,4,5,7]
p1 = [1,3,5,7,4]
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
p1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

# ----- test 4 -----
p0 = [1,3,6,11,15,21,27,34,42,50,59,68,78,89,100,111,124,136,149,163,177,191,207,222,238,254,271,289,306,324,343,362,381,401,422,442,463,485,507,529,552,575,598,622,646,671,696,721,747,773]
p1 = [1,3,11,21,34,50,68,89,111,136,163,191,222,254,289,324,362,401,442,485,529,575,622,671,721,773,747,696,646,598,552,507,463,422,381,343,306,271,238,207,177,149,124,100,78,59,42,27,15,6]
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# 
# There are several people that will sit around the same table in a circular fashion. Since all these people are very self-conscious about their height, you don't want to sit any short person next to a tall one. To formalize this, we want to minimize the maximum height difference between 2 adjacent persons.
# 
# You will be given the heights of the people as a tuple (integer). Return a tuple (integer) with the height of each individual in clockwise order of a seating arrangement that follows the above rule. If there are several solutions, return the lexicographically first one.
# 
# 
# DEFINITION
# Class:HeightRound
# Method:getBestRound
# Parameters:tuple (integer)
# Returns:tuple (integer)
# Method signature:def getBestRound(self, heights):
# 
# 
# CONSTRAINTS
# -heights will contain between 3 and 50 elements, inclusive.
# -Each element of heights will be between 1 and 1000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {1,2,3,4}
# 
# Returns: {1, 2, 4, 3 }
# 
# It's better to separate the tallest and shortest people in the round. All solutions with 1 and 4 separated are equivalent, so we choose the lexicographically first one.
# 
# 1)
# {1000,500,1}
# 
# Returns: {1, 500, 1000 }
# 
# In a round of only 3 persons, everybody is next to everyone else, so we only have to return the lexicographically first representation.
# 
# 2)
# {1,3,4,5,7}
# 
# Returns: {1, 3, 5, 7, 4 }
# 
# 
# 
# 3)
# {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
#  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
# 
# Returns: {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!
