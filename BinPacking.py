import math
import string

class BinPacking:
    def minBins(self, tuple_items):
        items = list(tuple_items)
        bin_count = 0

        while 100 in items and 200 in items:
            items.remove(100)
            items.remove(200)
            bin_count +=1

        while items.count(100) >=3: 
            for i in range(3):
                items.remove(100)
            bin_count +=1

        items.sort()
        while len(items) >0:
            if len(items) == 1:
                bin_count +=1
                return bin_count
            if sum(items[:2]) > 300:
                bin_count += len(items)
                return bin_count
            target_item = items.pop(0)
            best_index = 0 
            for index in range(len(items)):
                if ( items[index] + target_item ) <= 300  and items[index]  > items[best_index] :
                    best_index = index
            items.pop(best_index)
            bin_count+=1

        return bin_count

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = BinPacking()
	startTime = time.clock()
	answer = obj.minBins(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p1))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = [300,300,300]
p1 = 3
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = [130,140,150,160]
p1 = 2
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = [100,100,100,100,100,100,100,100,100]
p1 = 3
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = [100,200,100,100,100,100,200,100,200]
p1 = 4
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

# ----- test 4 -----
p0 = [157,142,167,133,135,157,143,160,141,123,162,159,165,137,138,152]
p1 = 8
all_right = KawigiEdit_RunTest(4, p0, True, p1) and all_right
# ----- test 5 -----
p0 = [100,100,100,200,200,200]
p1 = 3
all_right = KawigiEdit_RunTest(5, p0, True, p1) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Fox Ciel has some items. The weight of the i-th (0-based) item is item[i]. She wants to put all items into bins.
# 
# 
# The capacity of each bin is 300. She can put an arbitrary number of items into a single bin, but the total weight of items in a bin must be less than or equal to 300.
# 
# 
# You are given the tuple (integer) item. It is known that the weight of each item is between 100 and 300, inclusive. Return the minimal number of bins required to store all items.
# 
# 
# DEFINITION
# Class:BinPacking
# Method:minBins
# Parameters:tuple (integer)
# Returns:integer
# Method signature:def minBins(self, item):
# 
# 
# CONSTRAINTS
# -item will contain between 1 and 50 elements, inclusive.
# -Each element of item will be between 100 and 300, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {150, 150, 150, 150, 150}
# 
# Returns: 3
# 
# You have five items and each bin can hold at most two of them. You need at least three bins.
# 
# 1)
# {130, 140, 150, 160}
# 
# Returns: 2
# 
# For example, you can distribute the items in the following way:
# 
# Bin 1: 130, 150
# Bin 2: 140, 160
# 
# 
# 
# 2)
# {100, 100, 100, 100, 100, 100, 100, 100, 100}
# 
# Returns: 3
# 
# 
# 
# 3)
# {100, 200, 100, 100, 100, 100, 200, 100, 200}
# 
# Returns: 4
# 
# 
# 
# 4)
# {157, 142, 167, 133, 135, 157, 143, 160, 141, 123, 162, 159, 165, 137, 138, 152}
# 
# Returns: 8
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!
