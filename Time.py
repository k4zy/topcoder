import math
import string

class Time:
    def whatTime(self, seconds):
        h = seconds/3600
        m = (seconds - h * 3600 )/60
        s = (seconds - h * 3600 - m * 60 )
        
        return "{0}:{1}:{2}".format(h,m,s)

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0))
	print(str("]"))
	obj = Time()
	startTime = time.clock()
	answer = obj.whatTime(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p1) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = 0
p1 = "0:0:0"
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = 3661
p1 = "1:1:1"
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = 5436
p1 = "1:30:36"
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = 86399
p1 = "23:59:59"
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Computers tend to store dates and times as single numbers which represent the number of seconds or milliseconds since a particular date.  Your task in this problem is to write a method whatTime, which takes an integer, seconds, representing the number of seconds since midnight on some day, and returns a string formatted as "<H>:<M>:<S>".  Here, <H> represents the number of complete hours since midnight, <M> represents the number of complete minutes since the last complete hour ended, and <S> represents the number of seconds since the last complete minute ended.  Each of <H>, <M>, and <S> should be an integer, with no extra leading 0's.  Thus, if seconds is 0, you should return "0:0:0", while if seconds is 3661, you should return "1:1:1".
# 
# DEFINITION
# Class:Time
# Method:whatTime
# Parameters:integer
# Returns:string
# Method signature:def whatTime(self, seconds):
# 
# 
# CONSTRAINTS
# -seconds will be between 0 and 24*60*60 - 1 = 86399, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# 0
# 
# Returns: "0:0:0"
# 
# 1)
# 3661
# 
# Returns: "1:1:1"
# 
# 2)
# 5436
# 
# Returns: "1:30:36"
# 
# 3)
# 86399
# 
# Returns: "23:59:59"
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!
