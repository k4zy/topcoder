import math
import string

class CommonMultiples:
    def countCommMult(self, a, lower, upper):
        
        return

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str(p1) + str(",") + str(p2))
	print(str("]"))
	obj = CommonMultiples()
	startTime = time.clock()
	answer = obj.countCommMult(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p3))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = [1,2,3]
p1 = 5
p2 = 15
p3 = 2
all_right = KawigiEdit_RunTest(0, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 1 -----
p0 = [1,2,4,8,16,32,64]
p1 = 128
p2 = 128
p3 = 1
all_right = KawigiEdit_RunTest(1, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 2 -----
p0 = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,49]
p1 = 1
p2 = 2000000000
p3 = 0
all_right = KawigiEdit_RunTest(2, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 3 -----
p0 = [1,1,1]
p1 = 1
p2 = 2000000000
p3 = 2000000000
all_right = KawigiEdit_RunTest(3, p0, p1, p2, True, p3) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# 
# You will be given a tuple (integer) a and two integers lower and upper.  Return the number of integers between lower and upper, inclusive, that are multiples of all members of a.
# 
# 
# DEFINITION
# Class:CommonMultiples
# Method:countCommMult
# Parameters:tuple (integer), integer, integer
# Returns:integer
# Method signature:def countCommMult(self, a, lower, upper):
# 
# 
# CONSTRAINTS
# -a will contain between 1 and 50 elements, inclusive.
# -Each element of a will be between 1 and 100, inclusive.
# -upper will be between 1 and 2000000000 (2*109), inclusive.
# -lower will be between 1 and upper, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {1,2,3}
# 5
# 15
# 
# Returns: 2
# 
# The only numbers between 5 and 15 that are multiples of 1, 2 and 3 are 6 and 12.
# 
# 1)
# {1,2,4,8,16,32,64}
# 128
# 128
# 
# Returns: 1
# 
# 128 is a multiple of all smaller powers of 2.
# 
# 2)
# {2,3,5,7,11,13,17,19,23,29,31,37,41,43,49}
# 1
# 2000000000
# 
# Returns: 0
# 
# 
# 
# 3)
# {1,1,1}
# 1
# 2000000000
# 
# Returns: 2000000000
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!
