import math
import string

class Pathfinding:
    def getDirections(self, x, y):
        now = [0,0]
        result = 0
        print(now)
        if x>=0 and y>=0 or x >0 and y <0 or x<0 and y>0:
            return abs(x)+abs(y)
        elif  x==0 and y<0 and y%2==0 or x<0 and x%2==0 and y==0:
            return 2 * ( abs(x)+abs(y) )
        else:
            return abs(x)+abs(y)+2
        

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str(p1))
	print(str("]"))
	obj = Pathfinding()
	startTime = time.clock()
	answer = obj.getDirections(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p2))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = 0
p1 = -4
p2 = 8
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = 5
p1 = -4
p2 = 9
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = 5
p1 = 4
p2 = 9
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = -1
p1 = -4
p2 = 7
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

# ----- test 4 -----
p0 = 0
p1 = 0
p2 = 0
all_right = KawigiEdit_RunTest(4, p0, p1, True, p2) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Recently you have been working on the pathfinding module for your AI system.  Your objective is to find the shortest path for an agent that wants to travel between two points on a plane.  The agent will start at the point (0,0), and travel to the point (x,y).  You decided that the agent will move either on horizontal of vertical lines such that, at every moment, at least one coordinate of the agent is an integer.
# 
#   There is yet another restriction however.  Each line will only allow movement in one direction.  All horizontal lines with odd y-coordinates will be directed toward decreasing values of x, and all other horizontal lines toward increasing values of x.  Similarly, all vertical lines with odd x-coordinates will be directed toward decreasing values of y, and all other vertical lines toward increasing values of y.
# 
# 
# Given x and y, return the distance that the agent must travel.
# 
# DEFINITION
# Class:Pathfinding
# Method:getDirections
# Parameters:integer, integer
# Returns:integer
# Method signature:def getDirections(self, x, y):
# 
# 
# CONSTRAINTS
# -x and y will both be between -10^6 and 10^6, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# 0
# -4
# 
# Returns: 8
# 
# A possible path from (0,0) to (0,-4) is through the points (1,0), (1,-3), (-1,-3) and (-1,-4). 
# 
# 1)
# 5
# -4
# 
# Returns: 9
# 
# 
# 
# 2)
# 5
# 4
# 
# Returns: 9
# 
# 
# 
# 3)
# -1
# -4
# 
# Returns: 7
# 
# 
# 
# 4)
# 0
# 0
# 
# Returns: 0
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!
